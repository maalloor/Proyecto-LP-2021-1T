Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALIAS
    AND
    APOST
    ASSIGN
    BEGIN
    BLOCKCOMMENT
    BREAK
    CLASS
    COMMA
    COMMENT
    DEF
    DIFFERENT
    DO
    DQUOTE
    ELSE
    ELSIF
    END
    EQUALS
    FALSE
    FIRST
    FOR
    GETS
    GLOBALID
    GREATER
    GREATEREQUAL
    IF
    IN
    INSERT
    INSTANCEID
    LBRACKET
    LENGTH
    LESS
    LESSEQUAL
    NEW
    NIL
    NOT
    OR
    POP
    PRINT
    PUSH
    PUTS
    QUEUE
    RBRACKET
    STRING
    THEN
    TOS
    TRUE
    WHILE

Grammar

Rule 0     S' -> math_operations
Rule 1     math_operations -> math_operation
Rule 2     math_operations -> math_operation math_operator math_operations
Rule 3     math_operation -> math_value math_operator math_value
Rule 4     math_operation -> math_value
Rule 5     math_operation -> LPAREN math_value math_operator math_value RPAREN
Rule 6     math_value -> real
Rule 7     math_value -> ID
Rule 8     math_value -> casting
Rule 9     math_operator -> ADD
Rule 10    math_operator -> SUBSTRACT
Rule 11    math_operator -> MULTIPLY
Rule 12    math_operator -> DIVIDE
Rule 13    math_operator -> MODULUS
Rule 14    real -> INTEGER
Rule 15    real -> SUBSTRACT INTEGER
Rule 16    real -> FLOAT
Rule 17    real -> SUBSTRACT FLOAT
Rule 18    casting -> ID DOT TOI
Rule 19    casting -> ID DOT TOF

Terminals, with rules where they appear

ADD                  : 9
ALIAS                : 
AND                  : 
APOST                : 
ASSIGN               : 
BEGIN                : 
BLOCKCOMMENT         : 
BREAK                : 
CLASS                : 
COMMA                : 
COMMENT              : 
DEF                  : 
DIFFERENT            : 
DIVIDE               : 12
DO                   : 
DOT                  : 18 19
DQUOTE               : 
ELSE                 : 
ELSIF                : 
END                  : 
EQUALS               : 
FALSE                : 
FIRST                : 
FLOAT                : 16 17
FOR                  : 
GETS                 : 
GLOBALID             : 
GREATER              : 
GREATEREQUAL         : 
ID                   : 7 18 19
IF                   : 
IN                   : 
INSERT               : 
INSTANCEID           : 
INTEGER              : 14 15
LBRACKET             : 
LENGTH               : 
LESS                 : 
LESSEQUAL            : 
LPAREN               : 5
MODULUS              : 13
MULTIPLY             : 11
NEW                  : 
NIL                  : 
NOT                  : 
OR                   : 
POP                  : 
PRINT                : 
PUSH                 : 
PUTS                 : 
QUEUE                : 
RBRACKET             : 
RPAREN               : 5
STRING               : 
SUBSTRACT            : 10 15 17
THEN                 : 
TOF                  : 19
TOI                  : 18
TOS                  : 
TRUE                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

casting              : 8
math_operation       : 1 2
math_operations      : 2 0
math_operator        : 2 3 5
math_value           : 3 3 4 5 5
real                 : 6

Parsing method: LALR

state 0

    (0) S' -> . math_operations
    (1) math_operations -> . math_operation
    (2) math_operations -> . math_operation math_operator math_operations
    (3) math_operation -> . math_value math_operator math_value
    (4) math_operation -> . math_value
    (5) math_operation -> . LPAREN math_value math_operator math_value RPAREN
    (6) math_value -> . real
    (7) math_value -> . ID
    (8) math_value -> . casting
    (14) real -> . INTEGER
    (15) real -> . SUBSTRACT INTEGER
    (16) real -> . FLOAT
    (17) real -> . SUBSTRACT FLOAT
    (18) casting -> . ID DOT TOI
    (19) casting -> . ID DOT TOF

    LPAREN          shift and go to state 4
    ID              shift and go to state 6
    INTEGER         shift and go to state 8
    SUBSTRACT       shift and go to state 9
    FLOAT           shift and go to state 10

    math_operations                shift and go to state 1
    math_operation                 shift and go to state 2
    math_value                     shift and go to state 3
    real                           shift and go to state 5
    casting                        shift and go to state 7

state 1

    (0) S' -> math_operations .



state 2

    (1) math_operations -> math_operation .
    (2) math_operations -> math_operation . math_operator math_operations
    (9) math_operator -> . ADD
    (10) math_operator -> . SUBSTRACT
    (11) math_operator -> . MULTIPLY
    (12) math_operator -> . DIVIDE
    (13) math_operator -> . MODULUS

    $end            reduce using rule 1 (math_operations -> math_operation .)
    ADD             shift and go to state 12
    SUBSTRACT       shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    MODULUS         shift and go to state 16

    math_operator                  shift and go to state 11

state 3

    (3) math_operation -> math_value . math_operator math_value
    (4) math_operation -> math_value .
    (9) math_operator -> . ADD
    (10) math_operator -> . SUBSTRACT
    (11) math_operator -> . MULTIPLY
    (12) math_operator -> . DIVIDE
    (13) math_operator -> . MODULUS

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUBSTRACT resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
    $end            reduce using rule 4 (math_operation -> math_value .)
    ADD             shift and go to state 12
    SUBSTRACT       shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    MODULUS         shift and go to state 16

  ! ADD             [ reduce using rule 4 (math_operation -> math_value .) ]
  ! SUBSTRACT       [ reduce using rule 4 (math_operation -> math_value .) ]
  ! MULTIPLY        [ reduce using rule 4 (math_operation -> math_value .) ]
  ! DIVIDE          [ reduce using rule 4 (math_operation -> math_value .) ]
  ! MODULUS         [ reduce using rule 4 (math_operation -> math_value .) ]

    math_operator                  shift and go to state 17

state 4

    (5) math_operation -> LPAREN . math_value math_operator math_value RPAREN
    (6) math_value -> . real
    (7) math_value -> . ID
    (8) math_value -> . casting
    (14) real -> . INTEGER
    (15) real -> . SUBSTRACT INTEGER
    (16) real -> . FLOAT
    (17) real -> . SUBSTRACT FLOAT
    (18) casting -> . ID DOT TOI
    (19) casting -> . ID DOT TOF

    ID              shift and go to state 6
    INTEGER         shift and go to state 8
    SUBSTRACT       shift and go to state 9
    FLOAT           shift and go to state 10

    math_value                     shift and go to state 18
    real                           shift and go to state 5
    casting                        shift and go to state 7

state 5

    (6) math_value -> real .

    ADD             reduce using rule 6 (math_value -> real .)
    SUBSTRACT       reduce using rule 6 (math_value -> real .)
    MULTIPLY        reduce using rule 6 (math_value -> real .)
    DIVIDE          reduce using rule 6 (math_value -> real .)
    MODULUS         reduce using rule 6 (math_value -> real .)
    $end            reduce using rule 6 (math_value -> real .)
    RPAREN          reduce using rule 6 (math_value -> real .)


state 6

    (7) math_value -> ID .
    (18) casting -> ID . DOT TOI
    (19) casting -> ID . DOT TOF

    ADD             reduce using rule 7 (math_value -> ID .)
    SUBSTRACT       reduce using rule 7 (math_value -> ID .)
    MULTIPLY        reduce using rule 7 (math_value -> ID .)
    DIVIDE          reduce using rule 7 (math_value -> ID .)
    MODULUS         reduce using rule 7 (math_value -> ID .)
    $end            reduce using rule 7 (math_value -> ID .)
    RPAREN          reduce using rule 7 (math_value -> ID .)
    DOT             shift and go to state 19


state 7

    (8) math_value -> casting .

    ADD             reduce using rule 8 (math_value -> casting .)
    SUBSTRACT       reduce using rule 8 (math_value -> casting .)
    MULTIPLY        reduce using rule 8 (math_value -> casting .)
    DIVIDE          reduce using rule 8 (math_value -> casting .)
    MODULUS         reduce using rule 8 (math_value -> casting .)
    $end            reduce using rule 8 (math_value -> casting .)
    RPAREN          reduce using rule 8 (math_value -> casting .)


state 8

    (14) real -> INTEGER .

    ADD             reduce using rule 14 (real -> INTEGER .)
    SUBSTRACT       reduce using rule 14 (real -> INTEGER .)
    MULTIPLY        reduce using rule 14 (real -> INTEGER .)
    DIVIDE          reduce using rule 14 (real -> INTEGER .)
    MODULUS         reduce using rule 14 (real -> INTEGER .)
    $end            reduce using rule 14 (real -> INTEGER .)
    RPAREN          reduce using rule 14 (real -> INTEGER .)


state 9

    (15) real -> SUBSTRACT . INTEGER
    (17) real -> SUBSTRACT . FLOAT

    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 21


state 10

    (16) real -> FLOAT .

    ADD             reduce using rule 16 (real -> FLOAT .)
    SUBSTRACT       reduce using rule 16 (real -> FLOAT .)
    MULTIPLY        reduce using rule 16 (real -> FLOAT .)
    DIVIDE          reduce using rule 16 (real -> FLOAT .)
    MODULUS         reduce using rule 16 (real -> FLOAT .)
    $end            reduce using rule 16 (real -> FLOAT .)
    RPAREN          reduce using rule 16 (real -> FLOAT .)


state 11

    (2) math_operations -> math_operation math_operator . math_operations
    (1) math_operations -> . math_operation
    (2) math_operations -> . math_operation math_operator math_operations
    (3) math_operation -> . math_value math_operator math_value
    (4) math_operation -> . math_value
    (5) math_operation -> . LPAREN math_value math_operator math_value RPAREN
    (6) math_value -> . real
    (7) math_value -> . ID
    (8) math_value -> . casting
    (14) real -> . INTEGER
    (15) real -> . SUBSTRACT INTEGER
    (16) real -> . FLOAT
    (17) real -> . SUBSTRACT FLOAT
    (18) casting -> . ID DOT TOI
    (19) casting -> . ID DOT TOF

    LPAREN          shift and go to state 4
    ID              shift and go to state 6
    INTEGER         shift and go to state 8
    SUBSTRACT       shift and go to state 9
    FLOAT           shift and go to state 10

    math_operation                 shift and go to state 2
    math_operations                shift and go to state 22
    math_value                     shift and go to state 3
    real                           shift and go to state 5
    casting                        shift and go to state 7

state 12

    (9) math_operator -> ADD .

    LPAREN          reduce using rule 9 (math_operator -> ADD .)
    ID              reduce using rule 9 (math_operator -> ADD .)
    INTEGER         reduce using rule 9 (math_operator -> ADD .)
    SUBSTRACT       reduce using rule 9 (math_operator -> ADD .)
    FLOAT           reduce using rule 9 (math_operator -> ADD .)


state 13

    (10) math_operator -> SUBSTRACT .

    LPAREN          reduce using rule 10 (math_operator -> SUBSTRACT .)
    ID              reduce using rule 10 (math_operator -> SUBSTRACT .)
    INTEGER         reduce using rule 10 (math_operator -> SUBSTRACT .)
    SUBSTRACT       reduce using rule 10 (math_operator -> SUBSTRACT .)
    FLOAT           reduce using rule 10 (math_operator -> SUBSTRACT .)


state 14

    (11) math_operator -> MULTIPLY .

    LPAREN          reduce using rule 11 (math_operator -> MULTIPLY .)
    ID              reduce using rule 11 (math_operator -> MULTIPLY .)
    INTEGER         reduce using rule 11 (math_operator -> MULTIPLY .)
    SUBSTRACT       reduce using rule 11 (math_operator -> MULTIPLY .)
    FLOAT           reduce using rule 11 (math_operator -> MULTIPLY .)


state 15

    (12) math_operator -> DIVIDE .

    LPAREN          reduce using rule 12 (math_operator -> DIVIDE .)
    ID              reduce using rule 12 (math_operator -> DIVIDE .)
    INTEGER         reduce using rule 12 (math_operator -> DIVIDE .)
    SUBSTRACT       reduce using rule 12 (math_operator -> DIVIDE .)
    FLOAT           reduce using rule 12 (math_operator -> DIVIDE .)


state 16

    (13) math_operator -> MODULUS .

    LPAREN          reduce using rule 13 (math_operator -> MODULUS .)
    ID              reduce using rule 13 (math_operator -> MODULUS .)
    INTEGER         reduce using rule 13 (math_operator -> MODULUS .)
    SUBSTRACT       reduce using rule 13 (math_operator -> MODULUS .)
    FLOAT           reduce using rule 13 (math_operator -> MODULUS .)


state 17

    (3) math_operation -> math_value math_operator . math_value
    (6) math_value -> . real
    (7) math_value -> . ID
    (8) math_value -> . casting
    (14) real -> . INTEGER
    (15) real -> . SUBSTRACT INTEGER
    (16) real -> . FLOAT
    (17) real -> . SUBSTRACT FLOAT
    (18) casting -> . ID DOT TOI
    (19) casting -> . ID DOT TOF

    ID              shift and go to state 6
    INTEGER         shift and go to state 8
    SUBSTRACT       shift and go to state 9
    FLOAT           shift and go to state 10

    math_value                     shift and go to state 23
    real                           shift and go to state 5
    casting                        shift and go to state 7

state 18

    (5) math_operation -> LPAREN math_value . math_operator math_value RPAREN
    (9) math_operator -> . ADD
    (10) math_operator -> . SUBSTRACT
    (11) math_operator -> . MULTIPLY
    (12) math_operator -> . DIVIDE
    (13) math_operator -> . MODULUS

    ADD             shift and go to state 12
    SUBSTRACT       shift and go to state 13
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    MODULUS         shift and go to state 16

    math_operator                  shift and go to state 24

state 19

    (18) casting -> ID DOT . TOI
    (19) casting -> ID DOT . TOF

    TOI             shift and go to state 25
    TOF             shift and go to state 26


state 20

    (15) real -> SUBSTRACT INTEGER .

    ADD             reduce using rule 15 (real -> SUBSTRACT INTEGER .)
    SUBSTRACT       reduce using rule 15 (real -> SUBSTRACT INTEGER .)
    MULTIPLY        reduce using rule 15 (real -> SUBSTRACT INTEGER .)
    DIVIDE          reduce using rule 15 (real -> SUBSTRACT INTEGER .)
    MODULUS         reduce using rule 15 (real -> SUBSTRACT INTEGER .)
    $end            reduce using rule 15 (real -> SUBSTRACT INTEGER .)
    RPAREN          reduce using rule 15 (real -> SUBSTRACT INTEGER .)


state 21

    (17) real -> SUBSTRACT FLOAT .

    ADD             reduce using rule 17 (real -> SUBSTRACT FLOAT .)
    SUBSTRACT       reduce using rule 17 (real -> SUBSTRACT FLOAT .)
    MULTIPLY        reduce using rule 17 (real -> SUBSTRACT FLOAT .)
    DIVIDE          reduce using rule 17 (real -> SUBSTRACT FLOAT .)
    MODULUS         reduce using rule 17 (real -> SUBSTRACT FLOAT .)
    $end            reduce using rule 17 (real -> SUBSTRACT FLOAT .)
    RPAREN          reduce using rule 17 (real -> SUBSTRACT FLOAT .)


state 22

    (2) math_operations -> math_operation math_operator math_operations .

    $end            reduce using rule 2 (math_operations -> math_operation math_operator math_operations .)


state 23

    (3) math_operation -> math_value math_operator math_value .

    ADD             reduce using rule 3 (math_operation -> math_value math_operator math_value .)
    SUBSTRACT       reduce using rule 3 (math_operation -> math_value math_operator math_value .)
    MULTIPLY        reduce using rule 3 (math_operation -> math_value math_operator math_value .)
    DIVIDE          reduce using rule 3 (math_operation -> math_value math_operator math_value .)
    MODULUS         reduce using rule 3 (math_operation -> math_value math_operator math_value .)
    $end            reduce using rule 3 (math_operation -> math_value math_operator math_value .)


state 24

    (5) math_operation -> LPAREN math_value math_operator . math_value RPAREN
    (6) math_value -> . real
    (7) math_value -> . ID
    (8) math_value -> . casting
    (14) real -> . INTEGER
    (15) real -> . SUBSTRACT INTEGER
    (16) real -> . FLOAT
    (17) real -> . SUBSTRACT FLOAT
    (18) casting -> . ID DOT TOI
    (19) casting -> . ID DOT TOF

    ID              shift and go to state 6
    INTEGER         shift and go to state 8
    SUBSTRACT       shift and go to state 9
    FLOAT           shift and go to state 10

    math_value                     shift and go to state 27
    real                           shift and go to state 5
    casting                        shift and go to state 7

state 25

    (18) casting -> ID DOT TOI .

    ADD             reduce using rule 18 (casting -> ID DOT TOI .)
    SUBSTRACT       reduce using rule 18 (casting -> ID DOT TOI .)
    MULTIPLY        reduce using rule 18 (casting -> ID DOT TOI .)
    DIVIDE          reduce using rule 18 (casting -> ID DOT TOI .)
    MODULUS         reduce using rule 18 (casting -> ID DOT TOI .)
    $end            reduce using rule 18 (casting -> ID DOT TOI .)
    RPAREN          reduce using rule 18 (casting -> ID DOT TOI .)


state 26

    (19) casting -> ID DOT TOF .

    ADD             reduce using rule 19 (casting -> ID DOT TOF .)
    SUBSTRACT       reduce using rule 19 (casting -> ID DOT TOF .)
    MULTIPLY        reduce using rule 19 (casting -> ID DOT TOF .)
    DIVIDE          reduce using rule 19 (casting -> ID DOT TOF .)
    MODULUS         reduce using rule 19 (casting -> ID DOT TOF .)
    $end            reduce using rule 19 (casting -> ID DOT TOF .)
    RPAREN          reduce using rule 19 (casting -> ID DOT TOF .)


state 27

    (5) math_operation -> LPAREN math_value math_operator math_value . RPAREN

    RPAREN          shift and go to state 28


state 28

    (5) math_operation -> LPAREN math_value math_operator math_value RPAREN .

    ADD             reduce using rule 5 (math_operation -> LPAREN math_value math_operator math_value RPAREN .)
    SUBSTRACT       reduce using rule 5 (math_operation -> LPAREN math_value math_operator math_value RPAREN .)
    MULTIPLY        reduce using rule 5 (math_operation -> LPAREN math_value math_operator math_value RPAREN .)
    DIVIDE          reduce using rule 5 (math_operation -> LPAREN math_value math_operator math_value RPAREN .)
    MODULUS         reduce using rule 5 (math_operation -> LPAREN math_value math_operator math_value RPAREN .)
    $end            reduce using rule 5 (math_operation -> LPAREN math_value math_operator math_value RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD in state 3 resolved as shift
WARNING: shift/reduce conflict for SUBSTRACT in state 3 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 3 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 3 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 3 resolved as shift
