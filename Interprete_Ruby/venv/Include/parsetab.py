
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ALIAS AND APOST ASSIGN BEGIN BLOCKCOMMENT BREAK CLASS COMMA COMMENT DEF DIFFERENT DIVIDE DO DOT DQUOTE ELSE ELSIF END EQUALS FALSE FIRST FLOAT FOR GETS GLOBALID GREATER GREATEREQUAL ID IF IN INSERT INSTANCEID INTEGER LBRACKET LENGTH LESS LESSEQUAL LPAREN MODULUS MULTIPLY NEW NIL NOT OR POP PRINT PUSH PUTS QUEUE RBRACKET RPAREN STRING SUBSTRACT THEN TOF TOI TOS TRUE WHILEmath_operations : math_operation\n                    | math_operation math_operator math_operationsmath_operation : math_value math_operator math_valuemath_operation : math_valuemath_operation : LPAREN math_value math_operator math_value RPARENmath_value : real\n                    | ID\n                    | castingmath_operator : ADD\n                    | SUBSTRACT\n                    | MULTIPLY\n                    | DIVIDE\n                    | MODULUSreal : INTEGER\n            | SUBSTRACT INTEGERreal : FLOAT\n            | SUBSTRACT FLOATcasting : ID DOT TOIcasting : ID DOT TOF'
    
_lr_action_items = {'LPAREN':([0,11,12,13,14,15,16,],[4,4,-9,-10,-11,-12,-13,]),'ID':([0,4,11,12,13,14,15,16,17,24,],[6,6,6,-9,-10,-11,-12,-13,6,6,]),'INTEGER':([0,4,9,11,12,13,14,15,16,17,24,],[8,8,20,8,-9,-10,-11,-12,-13,8,8,]),'SUBSTRACT':([0,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,20,21,23,24,25,26,28,],[9,13,13,9,-6,-7,-8,-14,-16,9,-9,-10,-11,-12,-13,9,13,-15,-17,-3,9,-18,-19,-5,]),'FLOAT':([0,4,9,11,12,13,14,15,16,17,24,],[10,10,21,10,-9,-10,-11,-12,-13,10,10,]),'$end':([1,2,3,5,6,7,8,10,20,21,22,23,25,26,28,],[0,-1,-4,-6,-7,-8,-14,-16,-15,-17,-2,-3,-18,-19,-5,]),'ADD':([2,3,5,6,7,8,10,18,20,21,23,25,26,28,],[12,12,-6,-7,-8,-14,-16,12,-15,-17,-3,-18,-19,-5,]),'MULTIPLY':([2,3,5,6,7,8,10,18,20,21,23,25,26,28,],[14,14,-6,-7,-8,-14,-16,14,-15,-17,-3,-18,-19,-5,]),'DIVIDE':([2,3,5,6,7,8,10,18,20,21,23,25,26,28,],[15,15,-6,-7,-8,-14,-16,15,-15,-17,-3,-18,-19,-5,]),'MODULUS':([2,3,5,6,7,8,10,18,20,21,23,25,26,28,],[16,16,-6,-7,-8,-14,-16,16,-15,-17,-3,-18,-19,-5,]),'RPAREN':([5,6,7,8,10,20,21,25,26,27,],[-6,-7,-8,-14,-16,-15,-17,-18,-19,28,]),'DOT':([6,],[19,]),'TOI':([19,],[25,]),'TOF':([19,],[26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'math_operations':([0,11,],[1,22,]),'math_operation':([0,11,],[2,2,]),'math_value':([0,4,11,17,24,],[3,18,3,23,27,]),'real':([0,4,11,17,24,],[5,5,5,5,5,]),'casting':([0,4,11,17,24,],[7,7,7,7,7,]),'math_operator':([2,3,18,],[11,17,24,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> math_operations","S'",1,None,None,None),
  ('math_operations -> math_operation','math_operations',1,'p_math_operations','mathOperations.py',6),
  ('math_operations -> math_operation math_operator math_operations','math_operations',3,'p_math_operations','mathOperations.py',7),
  ('math_operation -> math_value math_operator math_value','math_operation',3,'p_math_operation_complex','mathOperations.py',9),
  ('math_operation -> math_value','math_operation',1,'p_math_operation_simple','mathOperations.py',11),
  ('math_operation -> LPAREN math_value math_operator math_value RPAREN','math_operation',5,'p_math_operation_complex_paren','mathOperations.py',13),
  ('math_value -> real','math_value',1,'p_math_value','mathOperations.py',15),
  ('math_value -> ID','math_value',1,'p_math_value','mathOperations.py',16),
  ('math_value -> casting','math_value',1,'p_math_value','mathOperations.py',17),
  ('math_operator -> ADD','math_operator',1,'p_math_operator','mathOperations.py',19),
  ('math_operator -> SUBSTRACT','math_operator',1,'p_math_operator','mathOperations.py',20),
  ('math_operator -> MULTIPLY','math_operator',1,'p_math_operator','mathOperations.py',21),
  ('math_operator -> DIVIDE','math_operator',1,'p_math_operator','mathOperations.py',22),
  ('math_operator -> MODULUS','math_operator',1,'p_math_operator','mathOperations.py',23),
  ('real -> INTEGER','real',1,'p_real_integer','mathOperations.py',25),
  ('real -> SUBSTRACT INTEGER','real',2,'p_real_integer','mathOperations.py',26),
  ('real -> FLOAT','real',1,'p_real_float','mathOperations.py',28),
  ('real -> SUBSTRACT FLOAT','real',2,'p_real_float','mathOperations.py',29),
  ('casting -> ID DOT TOI','casting',3,'p_casting_integer','mathOperations.py',31),
  ('casting -> ID DOT TOF','casting',3,'p_casting_float','mathOperations.py',33),
]
